<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kiwi | Mark Struzinski]]></title>
  <link href="http://markstruzinski.com/blog/categories/kiwi/atom.xml" rel="self"/>
  <link href="http://markstruzinski.com/"/>
  <updated>2014-11-16T19:37:40-05:00</updated>
  <id>http://markstruzinski.com/</id>
  <author>
    <name><![CDATA[Mark Struzinski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode File Template for Kiwi Tests]]></title>
    <link href="http://markstruzinski.com/blog/2012/08/18/xcode-file-template-for-kiwi-tests/"/>
    <updated>2012-08-18T16:47:00-04:00</updated>
    <id>http://markstruzinski.com/blog/2012/08/18/xcode-file-template-for-kiwi-tests</id>
    <content type="html"><![CDATA[<p>I started using <a href="https://github.com/allending/Kiwi" title="allending/Kiwi">Kiwi</a> to drive unit tests on my most recent project. Kiwi is an excellent <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" title="Behavior-driven development - Wikipedia, the free encyclopedia">BDD (Behavior Driven Development)</a> framework that helps drive your code design by making test expectations very clear. It greatly increases the readability of your unit tests.</p>

<!-- more -->


<p>The Kiwi library only requires implementation files to write each spec (test). Per the <a href="https://github.com/allending/Kiwi" title="allending/Kiwi">documentation</a>, you follow these steps to create a spec:</p>

<ol>
<li>Create a .m file (no header required)</li>
<li>Add an import for the Kiwi library <code>#import Kiwi.h</code></li>
<li>Add the begin and end macros that expand at compile time to include the Kiwi code:

<ol>
<li><code>SPEC_BEGIN(SpecDescription)</code></li>
<li><code>SPEC_END</code></li>
</ol>
</li>
<li>Inside the <code>SPEC_BEGIN()</code> and <code>SPEC_END</code> macros, write your tests</li>
</ol>


<p>A typical Kiwi test follows this format:</p>

<pre><code class="objective-c Kiwi Test">
describe(@“when “testing math”, ^{
    context(@"when adding 2 numbers", ^{
        it(@"should return the correct value", ^{
            int a = 1;
            int b = 3;
            int result = a + b;
            [[theValue(result) should] equal:theValue(4)];
        });
    });
});
</code></pre>

<p>Outside of the 4 lines of code that actually run the test condition, there is a lot of boilerplate code that has to be created to get up and running with a new test spec. I decided to take this opportunity to learn how to create a new Xcode file template.</p>

<p>I found this excellent article on creating <a href="http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/">custom Xcode file templates</a> by <a href="http://www.bobmccune.com">Bob McCune</a>. You can read the link for greater detail, but basically you can create custom templates that will be picked up by Xcode’s New File dialog by creating this directory <code>~/Library/Developer/Xcode/Templates/File Templates/</code> and then placing each of your custom templates inside a folder in that directory.</p>

<p>I created one that accepts a spec name and the first test decription. It creates a shell that includes the Kiwi import statement, the required macros, and the framework for 1 description, context, and test. The description<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> is filled in based on your input in the new file creation dialog. I’ve created a <a href="http://cl.ly/1w3i1H2p1h0z">downloadable zip</a> of the required files. You should just be able to drop this into the location specified above and be up and running.</p>

<p>As soon as possible, I’ll also share this on GitHub.</p>

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
