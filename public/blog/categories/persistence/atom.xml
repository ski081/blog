<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: persistence | Mark Struzinski]]></title>
  <link href="http://markstruzinski.com/blog/categories/persistence/atom.xml" rel="self"/>
  <link href="http://markstruzinski.com/"/>
  <updated>2014-11-16T19:37:40-05:00</updated>
  <id>http://markstruzinski.com/</id>
  <author>
    <name><![CDATA[Mark Struzinski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Persisting Data Using the Plist Format: Part 2/2]]></title>
    <link href="http://markstruzinski.com/blog/2012/02/23/persisting-data-using-the-plist-format-part-2-slash-2/"/>
    <updated>2012-02-23T12:16:00-05:00</updated>
    <id>http://markstruzinski.com/blog/2012/02/23/persisting-data-using-the-plist-format-part-2-slash-2</id>
    <content type="html"><![CDATA[<p>This is a follow up to my [previous post]:<a href="http://markstruzinski.com/blog/2012/02/03/persisting-simple-data-using-the-plist-format/">part1</a> on persisting PList data to disk as a form of transient storage for data. This second part will just show an easy way to pull that data from disk and get it into memory in an easily usable format.</p>

<p>All of our Plists are stored as dictionaries. The keys for the dictionaries are stored as constants in a code file (<code>Constants.h/.m</code>). This allows for compile time checking and keeps us from having to litter our code with magic strings when trying to access the values.</p>

<!-- more -->


<p>Here is a sample workflow to get this method up and running:</p>

<h2>The PList Data</h2>

<p>Assuming we have a plist that contains the following data:</p>

<pre><code class="xml PList Data">&lt;xml version="1.0&amp;quot; encoding="UTF-8"&gt;
&lt;DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;firstName&lt;/key&gt;
    &lt;string&gt;Mark&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<h2>Create a Constants File, and Always Use It</h2>

<p>Create a Constants file, and add all keys to it as <code>const NSString</code>. Be strict and only reference these keys when attempting to access data from your NSDictionaries. Don’t shortcut and put the strings directly into your code. Here is an example of how I have this set up:</p>

<h4>Constants.h</h4>

<pre><code class="objective-c Constants Header">#import &lt;Foundation/Foundation.h&gt;;

@interface Constants : NSObject

extern NSString * const DICT_KEY_FIRST_NAME;

@end
</code></pre>

<h4>Constants.m</h4>

<pre><code class="objective-c Constants Implementation">#import "Constants.h";

@implementation Constants

NSString * const DICT_KEY_FIRST_NAME   = @"firstName";

@end
</code></pre>

<h2>Add your Constants file to your pre-compiled headers file so it is available everywhere</h2>

<p>Adding files to your pre-compiled headers makes them available everywhere in your project without having to import each specific class header in the file where you’re trying to use it. Use this convenience judiciously, and only for classes that you truly think you’ll need everywhere. I always include my Constants file in the pre-compiled header to ensure I can access it without having to import it everywhere.</p>

<p>You can find your pre-compiled header file in the <strong>Supporting Files</strong> group in your project navigator in XCode (if you haven’t moved it). It is typically named <code>{projectname}-Prefix.pch</code>, where {projectname} is the name of your project. At the bottom of this file, you can add #import statements for the header fields you are interested in. Your file should look something like this:</p>

<pre><code class="objective-c Prefix Header">
#import &lt;Availability.h&gt;

#ifndef __IPHONE_3_0
#warning &amp;quot;This project uses features only available in iOS SDK 3.0 and later.&amp;quot;
#endif

#ifdef __OBJC__
    #import &lt;UIKit/UIKit.h&gt;
    #import &lt;Foundation/Foundation.h&gt;
    #import &lt;CoreData/CoreData.h&gt;
    #import "Constants.h"
#endif
</code></pre>

<p>The import statement you’re interested in the last one. Make sure you add it inside the <code>#ifdef__OBJC__</code> block.</p>

<p>This adds an #import statement for each file at compile time which includes these files throughout your entire project. It will also update XCode’s autocomplete indexing so that you are able to use autocomplete for the code on the imported files.</p>

<h2>Pull your file from disk, and use the constants defined</h2>

<p>Here is an example of how we could wrap this all up and pull some data from a plist file already on disk:</p>

<pre><code class="objective-c Retrieve Data">NSString *filepath = [self convenienceMethodToGetFilePathForPlist];
NSDictionary *resultsDict = [NSDictionary dictionaryWithContentsOfFile:filepath];
NSString *firstName = [resultsDict objectForKey:DICT_KEY_FIRST_NAME];
NSLog(@"First Name: %@",firstName);
</code></pre>

<p>Note above that you will need a way to get the plist file path before being able to access it. Also note that I prefix the string constant with <code>DICT_KEY</code>. I do this so that as my constants file grows, I can easily locate the value I’m looking for by typing the prefix I’m looking for.</p>

<p>Well, that wraps up this segment. As a caveat here, I’d like to mention that this data storage methodology, in my opinion, would not scale to larger data sets. You should definitely consider using [Core Data]:<a href="https://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html">coredata</a> for the majority of your data storage scenarios. We decided to use the PList format in this case because the data was transient, and was going to be wiped out on each subsequent change to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Simple Data Using the Plist Format: Part 1/1]]></title>
    <link href="http://markstruzinski.com/blog/2012/02/03/persisting-simple-data-using-the-plist-format/"/>
    <updated>2012-02-03T04:16:00-05:00</updated>
    <id>http://markstruzinski.com/blog/2012/02/03/persisting-simple-data-using-the-plist-format</id>
    <content type="html"><![CDATA[<p>Recently, we had the need to save some simple transient data to disk. For data of any significant size, we would have looked at Core Data for our persistence. In this case, we decided to use the PList format to save data to disk and pull it back off. We went through several ideas to store this data.</p>

<p>Some of the ideas we considered for persistence included:</p>

<ul>
<li>Core Data</li>
<li>JSON saved in a flat file format</li>
<li>PList saved directly to disk from a Cocoa object such as an NSArray or NSDictionary</li>
</ul>


<!-- more -->


<p>Because of our specific set of requirements and our hardware stack, we opted to go with the PList format. Our main driver for this decision was the amount of control we have over the response format from the server. Since we control our servers and their output, we are able to specify PList as a return type. We use the excellent <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> library to perform our networking tasks.</p>

<p>The AFNetworking library has a request named <a href="http://engineering.gowalla.com/AFNetworking/Classes/AFPropertyListRequestOperation.html">AFPropertyListRequestOperation</a>.<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> This operation will take an NSURLRequest and return an <code>id</code> that can be cast to a native Cocoa object, such as an NSDictionary or NSArray. Because we know the object’s return structure, we directly cast our object and move on to processing it. From there, it is just a matter of using the <code>writeToFile:Atomically</code> method to persist to disk.</p>

<p>Here is an example workflow:</p>

<pre><code class="objective-c Save PList">NSString *urlString = @"http://api.responder?format=plist;"
NSURLRequest *urlRequest = [NSURLRequest requestWithURL:[NSURL urlWithString:urlString]];
    AFPropertyListRequestOperation *operation = 
    [AFPropertyListRequestOperation propertyListRequestOperationWithRequest:urlString success:^(NSURLRequest *request, NSHTTPURLResponse *response, id propertyList) {
            // Cache the response
        NSDictionary *responseDict = (NSDictionary *)propertyList;
        NSArray *pathArray = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
        NSString *cachesPath = [pathArray lastObject];
        NSString *filePath = [NSString pathWithComponents:[NSArray arrayWithObjects:cachesPath,@&amp;quot;responseDict.plist&amp;quot;,nil]];
        BOOL success = [responseDict writeToFile:filePath atomically:YES];
        if(!success){
            // Handle error
        }        
    } failure:^(NSURLRequest *request, NSHTTPURLResponse *response, NSError *error, id propertyList) {
        NSLog(@&amp;quot;API Call failure: %@&amp;quot;,[error localizedDescription]);
    }];
</code></pre>

<p>One caveat here is to be careful that your dictionary is properly formatted when being returned from the server, and when attempting to save to disk. Initially, we had some bugs when nulls were encountered as a response from the server for specific values. The server parsing logic would simply not generate a value for the key if the value was null. In PList format, this is unacceptable syntax. If you tried to save this to disk, the call would fail and return NO from the <code>writeToFile: method</code>.</p>

<p>For my next post, I’ll do a quick follow up on how to pull the data back off of disk and get it into a usable format in memory.</p>

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
</feed>
