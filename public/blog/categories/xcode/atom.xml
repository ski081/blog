<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xcode | Mark Struzinski]]></title>
  <link href="http://markstruzinski.com/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://markstruzinski.com/"/>
  <updated>2014-11-16T19:37:40-05:00</updated>
  <id>http://markstruzinski.com/</id>
  <author>
    <name><![CDATA[Mark Struzinski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CodePilot]]></title>
    <link href="http://markstruzinski.com/blog/2012/12/12/codepilot/"/>
    <updated>2012-12-12T16:59:00-05:00</updated>
    <id>http://markstruzinski.com/blog/2012/12/12/codepilot</id>
    <content type="html"><![CDATA[<p> I’ve been using a handy little utility named <a href="http://codepilot.cc">CodePilot</a> since Xcode 3.x. CodePilot runs as a plugin and does a few things simply. It will open any file that has been indexed in your project, and also allows for searching symbols within a file.</p>

<!-- more -->


<p>I know the native Xcode Open Quickly (⌘ + ⬆ + O) dialog has also been able to do this for a long time, but it has always seemed to me to be a little bit slower and less intuitive than CodePilot.</p>

<h2>Usage</h2>

<p>Using CodePilot is simple. From anywhere within Xcode, type (⌘ + ⬆ + X) to open a search box. The search interface looks like this:</p>

<p><img src="/images/post_images/codepilot-ui.png"></p>

<p>Compare that to the Open Quickly functionality already bundled with Xcode:</p>

<p><img src="/images/post_images/xcode_open_quickly.png"></p>

<p>Typing a phrase that matches any part of the file name will bring up a list of matches. Subtext on the matches shows you what group the files resides in. You use the arrow keys to move up or down the list and press enter to open the file in the frontmost Xcode window. By default, when the interface launches, it will display a list of your most recently accessed files descending by time opened.</p>

<p>If you want to perform a quicker search based on the camel-cased uppercase letters in the file name (ex: for ViewController.m, you can type <strong>‘VC’</strong>). Note that the CodePilot UI also underlines the letters it is matching on, which is a nice touch:</p>

<p><img src="/images/post_images/codepilot-fuzzysearch.png"></p>

<p>You can search for symbols within a file as well. This includes method names, properties, ivars, and other identifiable symbols. For example, if you search for a file named ViewController.m and find it, you can arrow down to it, hit the space bar, then start typing the name of a symbol, such as <strong>‘aw’</strong> for <code>awakeFromNib</code>:</p>

<p><img src="/images/post_images/codepilot-symbolsearch.png"></p>

<h2>Settings</h2>

<p>CodePilot offers a small list of settings. You can configure:</p>

<ul>
<li>Remember last search (prefills the box with your last search result)</li>
<li>Auto search for selected text from Xcode</li>
</ul>


<p>CodePilot offers productivity gains by keeping your hands off of the mouse. It is one of the few utilities that I really miss when working on someone else’s system. Recently, Codepilot went free, which makes me worry for its future. Since it is an Xcode plugin, every time Xcode updates to a new version, there is a good possibility it will break. This has happened in the past, most notably when Xcode moved from v3 to v4.</p>

<p>Hopefully, there will be no breaking changes in future Xcode builds. Until then, it’s a great little utility that help speed me up just a little bit throughout my day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode File Template for Kiwi Tests]]></title>
    <link href="http://markstruzinski.com/blog/2012/08/18/xcode-file-template-for-kiwi-tests/"/>
    <updated>2012-08-18T16:47:00-04:00</updated>
    <id>http://markstruzinski.com/blog/2012/08/18/xcode-file-template-for-kiwi-tests</id>
    <content type="html"><![CDATA[<p>I started using <a href="https://github.com/allending/Kiwi" title="allending/Kiwi">Kiwi</a> to drive unit tests on my most recent project. Kiwi is an excellent <a href="http://en.wikipedia.org/wiki/Behavior-driven_development" title="Behavior-driven development - Wikipedia, the free encyclopedia">BDD (Behavior Driven Development)</a> framework that helps drive your code design by making test expectations very clear. It greatly increases the readability of your unit tests.</p>

<!-- more -->


<p>The Kiwi library only requires implementation files to write each spec (test). Per the <a href="https://github.com/allending/Kiwi" title="allending/Kiwi">documentation</a>, you follow these steps to create a spec:</p>

<ol>
<li>Create a .m file (no header required)</li>
<li>Add an import for the Kiwi library <code>#import Kiwi.h</code></li>
<li>Add the begin and end macros that expand at compile time to include the Kiwi code:

<ol>
<li><code>SPEC_BEGIN(SpecDescription)</code></li>
<li><code>SPEC_END</code></li>
</ol>
</li>
<li>Inside the <code>SPEC_BEGIN()</code> and <code>SPEC_END</code> macros, write your tests</li>
</ol>


<p>A typical Kiwi test follows this format:</p>

<pre><code class="objective-c Kiwi Test">
describe(@“when “testing math”, ^{
    context(@"when adding 2 numbers", ^{
        it(@"should return the correct value", ^{
            int a = 1;
            int b = 3;
            int result = a + b;
            [[theValue(result) should] equal:theValue(4)];
        });
    });
});
</code></pre>

<p>Outside of the 4 lines of code that actually run the test condition, there is a lot of boilerplate code that has to be created to get up and running with a new test spec. I decided to take this opportunity to learn how to create a new Xcode file template.</p>

<p>I found this excellent article on creating <a href="http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/">custom Xcode file templates</a> by <a href="http://www.bobmccune.com">Bob McCune</a>. You can read the link for greater detail, but basically you can create custom templates that will be picked up by Xcode’s New File dialog by creating this directory <code>~/Library/Developer/Xcode/Templates/File Templates/</code> and then placing each of your custom templates inside a folder in that directory.</p>

<p>I created one that accepts a spec name and the first test decription. It creates a shell that includes the Kiwi import statement, the required macros, and the framework for 1 description, context, and test. The description<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> is filled in based on your input in the new file creation dialog. I’ve created a <a href="http://cl.ly/1w3i1H2p1h0z">downloadable zip</a> of the required files. You should just be able to drop this into the location specified above and be up and running.</p>

<p>As soon as possible, I’ll also share this on GitHub.</p>

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p><a href='#fnref:1' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Xcode 4 Tip: Deleting Derived Data to Rescue Code Completion]]></title>
    <link href="http://markstruzinski.com/blog/2011/09/30/quick-xcode-4-tip-deleting-derived-data-to-rescue-code-completion/"/>
    <updated>2011-09-30T07:50:00-04:00</updated>
    <id>http://markstruzinski.com/blog/2011/09/30/quick-xcode-4-tip-deleting-derived-data-to-rescue-code-completion</id>
    <content type="html"><![CDATA[<h2>Quick Tip:</h2>

<p>I had an issue on a very large project in XCode. Starting 2 days ago, all of my syntax highlighting was completely broken. This is bad, but even worse, my code completion worked only partially. I was getting autocomplete for local variables only. When calling framework methods with a lot of parameters, I rely pretty heavily on code completion. I tried all of the usual fixes.</p>

<!-- more -->


<p>This includes:
- Doing a <strong>Project Clean (⌘⇧K)</strong>
- Doing a <strong>Clean Build Folder(⌥⌘⇧K)</strong>
- Restarting XCode</p>

<p>None of these solutions fixed the issue. After some digging, I came across <a href="http://stackoverflow.com/questions/5365212/xcode-4-code-loses-syntax-coloring-when-importing-project-from-xcode-3/5368489#5368489">this StackOverflow Post</a> which pointed me in the right direction. Seems like sometimes the project index, which contains metadata used to display code completion suggestions (among other things), can become corrupted. The solution is to delete it. This will force XCode to regenerate it, which rebuilds the index.</p>

<p>Here are the steps to delete your Derived Data folder:</p>

<ol>
<li>Go to XCode Settings <strong>(⌘,)</strong></li>
<li>Click the Locations tab. You will see a screen like this:
<img src="images/post_images/xcode-derived-data.png"></li>
<li>Click the small arrow next to the location of the Derived Data folder. This will open the Finder to the location of the Derived Data for any XCode projects you currently have on your Mac.</li>
<li>Find the one that starts with the name of your current project and delete it.</li>
<li>You should immediately see XCode start to re-index your project.</li>
</ol>


<p>For me, after this process completed, I got all of my functionality back. Your mileage may vary, and please make sure you back everything up before deleting anything!</p>
]]></content>
  </entry>
  
</feed>
